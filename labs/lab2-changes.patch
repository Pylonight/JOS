diff -u -r lab2_uc/boot/main.c lab2/boot/main.c
--- lab2_uc/boot/main.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/boot/main.c	2015-04-07 22:37:31.687881911 +0800
@@ -38,6 +38,11 @@
 void
 bootmain(void)
 {
+	// test "hello world" which is "he110 world" indeed
+	//unsigned int i = 0x00646c72;
+	//cprintf("H%x Wo%s", 57616, &i);
+	// well, but we don`t have a cprintf until after init. lol
+
 	struct Proghdr *ph, *eph;
 
 	// read 1st page off disk
diff -u -r lab2_uc/boot/Makefrag lab2/boot/Makefrag
--- lab2_uc/boot/Makefrag	2007-09-12 22:06:25.000000000 +0800
+++ lab2/boot/Makefrag	2015-04-07 22:37:31.687881911 +0800
@@ -27,6 +27,6 @@
 	@echo + ld boot/boot
 	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o $@.out $^
 	$(V)$(OBJDUMP) -S $@.out >$@.asm
-	$(V)$(OBJCOPY) -S -O binary $@.out $@
+	$(V)$(OBJCOPY) -S -R ".eh_frame" -O binary $@.out $@
 	$(V)perl boot/sign.pl $(OBJDIR)/boot/boot
 
diff -u -r lab2_uc/GNUmakefile lab2/GNUmakefile
--- lab2_uc/GNUmakefile	2007-09-12 22:06:25.000000000 +0800
+++ lab2/GNUmakefile	2015-04-07 22:40:04.711886269 +0800
@@ -70,7 +70,7 @@
 # -fno-builtin is required to avoid refs to undefined functions in the kernel.
 # Only optimize to -O1 to discourage inlining, which complicates backtraces.
 CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -O1 -fno-builtin -I$(TOP) -MD 
-CFLAGS += -Wall -Wno-format -Wno-unused -Werror -gstabs -m32
+CFLAGS += -Wall -Wno-format -Wno-unused -Werror -gstabs -m32 -fno-omit-frame-pointer
 
 # Add -fno-stack-protector if the option exists.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
diff -u -r lab2_uc/kern/console.c lab2/kern/console.c
--- lab2_uc/kern/console.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/console.c	2015-04-07 22:43:03.095892758 +0800
@@ -83,7 +83,7 @@
 // For information on PC parallel port programming, see the class References
 // page.
 
-// Stupid I/O delay routine necessitated by historical PC design flaws
+// Stupid I/O delay routine necessitated by historical PC design flaws. lol
 static void
 delay(void)
 {
@@ -148,9 +148,11 @@
 cga_putc(int c)
 {
 	// if no attribute given, then use black on white
+	// whether are 15-8 bits zero?If they are set 8,9,10 bit 1,If not continue.
 	if (!(c & ~0xFF))
-		c |= 0x0700;
+		c |= 0x0a00;
 
+	// whether are low 8 bits '\b','\n','\r','\t'?If they are,preform corresponding operation.
 	switch (c & 0xff) {
 	case '\b':
 		if (crt_pos > 0) {
@@ -171,6 +173,80 @@
 		cons_putc(' ');
 		cons_putc(' ');
 		break;
+	case '0':
+	case '1':
+	case '2':
+	case '3':
+	case '4':
+	case '5':
+	case '6':
+	case '7':
+	case '8':
+	case '9':
+		crt_buf[crt_pos++] = (c&0xf0ff)|0x0c00;
+		break;
+	case 'a':
+	case 'b':
+	case 'c':
+	case 'd':
+	case 'e':
+	case 'f':
+	case 'g':
+	case 'h':
+	case 'i':
+	case 'j':
+	case 'k':
+	case 'l':
+	case 'm':
+	case 'n':
+	case 'o':
+	case 'p':
+	case 'q':
+	case 'r':
+	case 's':
+	case 't':
+	case 'u':
+	case 'v':
+	case 'w':
+	case 'x':
+	case 'y':
+	case 'z':
+		crt_buf[crt_pos++] = (c&0xf0ff)|0x0900;
+		break;
+	case 'A':
+	case 'B':
+	case 'C':
+	case 'D':
+	case 'E':
+	case 'F':
+	case 'G':
+	case 'H':
+	case 'I':
+	case 'J':
+	case 'K':
+	case 'L':
+	case 'M':
+	case 'N':
+	case 'O':
+	case 'P':
+	case 'Q':
+	case 'R':
+	case 'S':
+	case 'T':
+	case 'U':
+	case 'V':
+	case 'W':
+	case 'X':
+	case 'Y':
+	case 'Z':
+		crt_buf[crt_pos++] = (c&0xf0ff)|0x0100;
+		break;
+	case '%':
+		crt_buf[crt_pos++] = (c&0xf0ff)|0x0e00;
+		break;
+	case '&':
+		crt_buf[crt_pos++] = (c&0xf0ff)|0x0d00;
+		break;
 	default:
 		crt_buf[crt_pos++] = c;		/* write the character */
 		break;
@@ -179,10 +255,12 @@
 	// What is the purpose of this?
 	if (crt_pos >= CRT_SIZE) {
 		int i;
-
+		// Move all chars on the screen above a line;(memcpy or memmove: memcpy(dst, src, size))[Comment this line, the screen will never roll for new info]
 		memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+		// Set the bottom line empty;(0x0700 is for color using)[Comment out this line and the bottom line will be nearly the same as the above line]
 		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
-			crt_buf[i] = 0x0700 | ' ';
+			crt_buf[i] = 0x0c00 | ' ';
+		// Fix the position of screen;[Comment out this line and the screen will turn pure black]
 		crt_pos -= CRT_COLS;
 	}
 
diff -u -r lab2_uc/kern/init.c lab2/kern/init.c
--- lab2_uc/kern/init.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/init.c	2015-04-08 08:22:42.173868201 +0800
@@ -31,10 +31,11 @@
 	i386_vm_init();
 
 
-
-
-
-
+	// test "hello world" which is "he110 world" indeed
+	//unsigned int i = 0x00646c72;
+	//cprintf("H%x Wo%s\n", 57616, &i);
+	// seems that it won`t work, because I never see 6828 on the screen.
+	// okay, it is the problem caused by wrong version of bochs. Maybe another way to handle?
 
 	// Drop into the kernel monitor.
 	while (1)
diff -u -r lab2_uc/kern/kdebug.c lab2/kern/kdebug.c
--- lab2_uc/kern/kdebug.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/kdebug.c	2015-04-08 08:17:50.273884866 +0800
@@ -157,6 +157,9 @@
 		if (stabs[lfun].n_strx < stabstr_end - stabstr)
 			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
 		info->eip_fn_addr = stabs[lfun].n_value;
+		// This "n_value" is the function's first addr, but when it comes to SLINE,
+		// "n_value" describes the offset, so we need to minus "n_value" fro addr
+		// to get the offset of the line.
 		addr -= info->eip_fn_addr;
 		// Search within the function definition for the line number.
 		lline = lfun;
@@ -181,8 +184,13 @@
 	//	Look at the STABS documentation and <inc/stab.h> to find
 	//	which one.
 	// Your code here.
+	stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+	info->eip_line = stabs[lline].n_desc;
+	if (rline < lline)
+	{
+		info->eip_line = -1;
+	}
 
-	
 	// Search backwards from the line number for the relevant filename
 	// stab.
 	// We can't just use the "lfile" stab because inlined functions
@@ -199,6 +207,14 @@
 	// Set eip_fn_narg to the number of arguments taken by the function,
 	// or 0 if there was no containing function.
 	// Your code here.
+	int i;	// loop
+	for (i = lfun; i <= rfun; ++i)
+	{
+		if (stabs[i].n_type == N_PSYM)
+		{
+			++(info->eip_fn_narg);
+		}
+	}
 
 	
 	return 0;
diff -u -r lab2_uc/kern/monitor.c lab2/kern/monitor.c
--- lab2_uc/kern/monitor.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/monitor.c	2015-04-08 09:26:17.585650421 +0800
@@ -24,6 +24,7 @@
 static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
+	{ "backtrace", "Display information about the stack", mon_backtrace},
 };
 #define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))
 
@@ -60,6 +61,40 @@
 mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 {
 	// Your code here.
+	unsigned int ebp;
+	unsigned int eip;
+	struct Eipdebuginfo debug_info;
+	int i;	// loop
+
+	cprintf("Stack backtrace:\n");
+	// current eip and print current function.
+	// cprintf is a function so init after it in case.
+	eip = read_eip();
+	ebp = read_ebp();
+
+	// in entry.S, ebp is set to be zero before calling i386_init.
+	while (ebp != 0)
+	{
+		if (debuginfo_eip(eip, &debug_info) >= 0)
+		{
+			cprintf("%s:%d: ", debug_info.eip_file, debug_info.eip_line);
+			for (i = 0; i < debug_info.eip_fn_namelen; ++i)
+			{
+				cprintf("%c", debug_info.eip_fn_name[i]);
+			}
+			cprintf("+%x -%d\n", eip-debug_info.eip_fn_addr, debug_info.eip_fn_narg);
+		}
+		else
+		{
+			cprintf("debuginfo_eip() failed\n");
+			return -1;
+		}
+
+		cprintf("  ebp %08x  eip %08x  args %08x %08x %08x %08x\n", ebp, *((unsigned int *)ebp+1), *((unsigned int *)ebp+2),
+			*((unsigned int *)ebp+3), *((unsigned int *)ebp+4), *((unsigned int *)ebp+5));
+		eip = *((unsigned int *)ebp+1);
+		ebp = *(unsigned int *)ebp;
+	}
 	return 0;
 }
 
diff -u -r lab2_uc/kern/pmap.c lab2/kern/pmap.c
--- lab2_uc/kern/pmap.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/kern/pmap.c	2015-04-09 11:46:08.768395059 +0800
@@ -118,11 +118,13 @@
 
 	// LAB 2: Your code here:
 	//	Step 1: round boot_freemem up to be aligned properly
+	boot_freemem = ROUNDUP(boot_freemem, align);
 	//	Step 2: save current value of boot_freemem as allocated chunk
+	v = boot_freemem;
 	//	Step 3: increase boot_freemem to record allocation
+	boot_freemem += ROUNDUP(n, align);
 	//	Step 4: return allocated chunk
-
-	return NULL;
+	return v;
 }
 
 // Set up a two-level page table:
@@ -145,7 +147,7 @@
 	size_t n;
 
 	// Delete this line:
-	panic("i386_vm_init: This function is not finished\n");
+	//panic("i386_vm_init: This function is not finished\n");
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
@@ -174,7 +176,7 @@
 	// programs will get read-only access to the array as well.
 	// You must allocate the array yourself.
 	// Your code goes here: 
-
+	pages = (struct Page *)boot_alloc(npage*sizeof(struct Page), PGSIZE);
 
 	//////////////////////////////////////////////////////////////////////
 	// Now that we've allocated the initial kernel data structures, we set
@@ -197,7 +199,9 @@
 	//    - pages -- kernel RW, user NONE
 	//    - the read-only version mapped at UPAGES -- kernel R, user R
 	// Your code goes here:
-
+	// [UPAGES, sizeof(PAGES) ] => [pages, sizeof(PAGES)]
+	n = ROUNDUP(npage*sizeof(struct Page), PGSIZE);
+	boot_map_segment(pgdir, UPAGES, n, PADDR(pages), PTE_U | PTE_P);
 
 
 	//////////////////////////////////////////////////////////////////////
@@ -208,6 +212,8 @@
 	//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed => faults
 	//     Permissions: kernel RW, user NONE
 	// Your code goes here:
+	// [KSTACKTOP â€“ KSTKSIZE, 8] => [bootstack, 8]
+	boot_map_segment(pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W | PTE_P);
 
 	//////////////////////////////////////////////////////////////////////
 	// Map all of physical memory at KERNBASE. 
@@ -217,6 +223,8 @@
 	// we just set up the amapping anyway.
 	// Permissions: kernel RW, user NONE
 	// Your code goes here: 
+	// [KERNBASE, pages in the memory] => [0, pages in the memory]
+	boot_map_segment(pgdir, KERNBASE, 0xffffffff-KERNBASE+1, 0, PTE_W | PTE_P);
 
 	// Check that the initial page directory has been set up correctly.
 	check_boot_pgdir();
@@ -436,6 +444,34 @@
 		pages[i].pp_ref = 0;
 		LIST_INSERT_HEAD(&page_free_list, &pages[i], pp_link);
 	}
+
+	// // the first method, fast
+	// // but cannot edit the .ref to 1
+	// // link from high addr to low addr
+	// extern char end[];
+	// // eliminate first page
+	// pages[1].pp_link = NULL;
+	// // eliminate IO hole and kernel(tightly connected)
+	// struct Page *pgstart = pa2page((physaddr_t)IOPHYSMEM);
+	// struct Page *pgend = pa2page((physaddr_t)(PADDR(end)+PGSIZE+npage*sizeof(struct Page)));
+	// // Will the multiply operation overflow? No! Because the result < memory_size
+	// ++pgend;	// protect the last piece of pg
+	// --pgstart;	// protect IOPHYSMEM
+	// pgend->pp_link = pgstart;
+
+	// the second method, slow
+	// but can edit the .ref to 1
+	pages[0].pp_ref = 1;
+	// remove the first page, where holds Real Mode IDT
+	LIST_REMOVE(&pages[0], pp_link);
+	// remove IO hole and kernel, they are tightly connected
+	// notice boot_freemem points to the next byte of free mem, and points to higher mem!
+	// so after the last calling "boot_alloc", boot_freemem remains the addr of the end addr of kernel pages plus 1
+	for (i = IOPHYSMEM; i < PADDR((unsigned int) boot_freemem); i += PGSIZE)
+	{
+		pages[i / PGSIZE].pp_ref = 1;
+		LIST_REMOVE(&pages[i / PGSIZE], pp_link);
+	}
 }
 
 //
@@ -467,7 +503,20 @@
 page_alloc(struct Page **pp_store)
 {
 	// Fill this function in
-	return -E_NO_MEM;
+	if (LIST_FIRST(&page_free_list) != NULL)
+	{
+		// obtain the first page in page_free_list
+		*pp_store = LIST_FIRST(&page_free_list);
+		// remove the obtained page in page_free_list
+		LIST_REMOVE(*pp_store, pp_link);
+		// init the page structure
+		page_initpp(*pp_store);
+		return 0;
+	}
+	else
+	{
+		return -E_NO_MEM;
+	}
 }
 
 //
@@ -477,7 +526,15 @@
 void
 page_free(struct Page *pp)
 {
-	// Fill this function in
+	if (pp->pp_ref)
+	{
+		// in case
+		panic("pp->pp_ref != 0, but page_free called");
+	}
+	else
+	{
+		LIST_INSERT_HEAD(&page_free_list, pp, pp_link);
+	}
 }
 
 //
@@ -508,7 +565,56 @@
 pgdir_walk(pde_t *pgdir, const void *va, int create)
 {
 	// Fill this function in
-	return NULL;
+	// page table entry
+	pte_t *pt_addr;
+	// new_pg doesn't need an initialization, because
+	// it will be casted to the existing space
+	struct Page *new_pt;
+	// attention to the priority of operations
+	// PTE_P means whether it is there in memory
+	if ((pgdir[PDX(va)] & PTE_P) != 0)
+	{
+		// va is la now, PDX(va) means page dir addr.
+		// and page dir is a page itself, so PTE_ADDR is
+		// needed to get the addr of phys page va pointing to.
+		// that is the addr of page table
+		// remember, pt_addr is a ptr to pte
+		// we got ptr to pte through va, and got va through ptr to pte.
+		pt_addr = (pte_t *)KADDR(PTE_ADDR(pgdir[PDX(va)]));
+		// now it's time to get final pa through va
+		// and remember, pt_addr is an array of pointer to phsy pages
+		return &pt_addr[PTX(va)];
+	}
+	else
+	{
+		if (create == 0)
+		{
+			return NULL;
+		}
+		else
+		{
+			// allocate a new page table
+			if (page_alloc(&new_pt) == 0)
+			{
+				new_pt->pp_ref = 1;
+				// new page table need to be cleared or a "pa2page" panic
+				// or an assertion failed about "check that new page tables get cleared"
+				memset(KADDR(page2pa(new_pt)), 0, PGSIZE);
+				// update the pgdir
+				// P, present in the memory
+				// W, writable; U, user
+				// PTE_U must be here; or GP arises when debuggin user process
+				pgdir[PDX(va)] = page2pa(new_pt) | PTE_P | PTE_W | PTE_U;
+				// then the same with the condition when page table exists in the dir
+				pt_addr = (pte_t *)KADDR(PTE_ADDR(pgdir[PDX(va)]));
+				return &pt_addr[PTX(va)];
+			}
+			else
+			{
+				return NULL;
+			}
+		}
+	}
 }
 
 //
@@ -534,7 +640,31 @@
 page_insert(pde_t *pgdir, struct Page *pp, void *va, int perm) 
 {
 	// Fill this function in
-	return 0;
+	// always create a new page table if there isn't
+	// which is "necessary, on demand" in the comment
+	pte_t *pt_addr = pgdir_walk(pgdir, va, 1);
+	if (pt_addr == NULL)
+	{
+		return -E_NO_MEM;
+	}
+	else
+	{
+		// increase pp_ref as insertion succeeds
+		++(pp->pp_ref);
+		// REMEMBER, pt_addr is a ptr to pte
+		// *pt_addr will get the value addressed at pt_addr
+		// already a page mapped at va, remove it
+		if ((*pt_addr & PTE_P) != 0)
+		{
+			page_remove(pgdir, va);
+			// The TLB must be invalidated 
+			// if a page was formerly present at 'va'.
+			tlb_invalidate(pgdir, va);
+		}
+		// again, through pt_addr we should get pa
+		*pt_addr = page2pa(pp) | perm | PTE_P;
+		return 0;
+	}
 }
 
 //
@@ -551,6 +681,30 @@
 boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, physaddr_t pa, int perm)
 {
 	// Fill this function in
+	// better than int i; no worry about overflow.
+	unsigned int i;
+	pte_t *pt_addr;
+	// size in stack, no worry.
+	size = ROUNDUP(size, PGSIZE);
+	// so there comes the question
+	// if those la has been allocated, what will happen?
+	// i guess that, the answer is, the condition above will
+	// never be reached. the reason is that it is called by boot,
+	// there should not be any protected la allocated, and
+	// the os programmer should be very careful so that 
+	// covering allocating won't happen.
+	// And what's more, it seems that pa need to be ROUNDUP?
+	for (i = 0; i < size; i += PGSIZE)
+	{
+		// get the page addr
+		pt_addr = pgdir_walk(pgdir, (void *)(la+i), 1);
+		if (pt_addr == NULL)
+		{
+			panic("failed to map la to pa in boot_map_segment()");
+		}
+		// map the phsy addr
+		*pt_addr = (pa+i) | perm | PTE_P;
+	}
 }
 
 //
@@ -567,7 +721,26 @@
 page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 {
 	// Fill this function in
-	return NULL;
+	// never create a new page table
+	pte_t *pt_addr = pgdir_walk(pgdir, va, 0);
+	if (pt_addr == NULL)
+	{
+		return NULL;
+	}
+	else
+	{
+		if (pte_store)
+		{
+			// be careful to read the header comment
+			*pte_store = pt_addr;
+		}
+		// pt_addr is ptr to pte, not phsy page addr
+		// we need to get pa through ptr to pte, (* is okay)
+		// and then get PPN through pa (1), and get page addr
+		// through PPN (2); (1) and (2) are done by "pa2page"
+		return pa2page(*pt_addr);
+		// "pa2page(phsyaddr_t pa)" returns &pages[PPN(pa)];
+	}
 }
 
 //
@@ -589,6 +762,29 @@
 page_remove(pde_t *pgdir, void *va)
 {
 	// Fill this function in
+	// the corresponding pte to set
+	pte_t *pt2set;
+	// the page found and to unmap
+	// and &pg2um is an addr and never equal to 0
+	// or it will crash IDT
+	struct Page *pg = page_lookup(pgdir, va, &pt2set);
+	if (pg == NULL)
+	{
+		// silently do nothing
+		// keep this brace in case to extend
+		// return written here will be better
+		// in case to add something in the bottom
+		return;
+	}
+	else
+	{
+		// --ref and if ref == 0 then page_free it
+		page_decref(pg);
+		// set the pte to zero as asked
+		// if code runs here, pte must exist, as pg exists
+		*pt2set = 0;
+		tlb_invalidate(pgdir, va);
+	}
 }
 
 //
@@ -758,4 +954,3 @@
 	
 	cprintf("page_check() succeeded!\n");
 }
-
diff -u -r lab2_uc/lib/printfmt.c lab2/lib/printfmt.c
--- lab2_uc/lib/printfmt.c	2007-09-12 22:06:25.000000000 +0800
+++ lab2/lib/printfmt.c	2015-04-07 22:37:31.691881574 +0800
@@ -207,10 +207,16 @@
 		// (unsigned) octal
 		case 'o':
 			// Replace this with your code.
-			putch('X', putdat);
-			putch('X', putdat);
-			putch('X', putdat);
-			break;
+			// putch('X', putdat);
+			// putch('X', putdat);
+			// putch('X', putdat);
+			num = getint(&ap, lflag);
+			if ((long long) num < 0) {
+				putch('-', putdat);
+				num = -(long long) num;
+			}
+			base = 8;
+			goto number;
 
 		// pointer
 		case 'p':
Only in lab2: obj
